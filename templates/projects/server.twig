{% extends "authenticated_base.twig" %}

{% block title %}
    Hosting: {{ project.name }}
{% endblock %}

{% block content %}
    <div id="container-info" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" onclick="closeModal(this);">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title">Bilgiler</h4>
                </div>
                <div class="modal-body">
                    <div class="loading">Yükleniyor...</div>
                    <div class="scroll">
                        <div class="detail"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="log-info" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" onclick="closeModal(this);">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title">Loglar</h4>
                </div>
                <div class="modal-body">
                    <div class="loading">Yükleniyor...</div>
                    <div class="scroll">
                        <div class="detail"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Panel</a></li>
        <li class="breadcrumb-item"><a href="/projects">Projeler</a></li>
        <li class="breadcrumb-item active">{{ project.name }}</li>
    </ol>
    <div class="box box-primary">
        <div class="box-header">
            <h3 class="box-title">{{ project.name }}</h3>
            <div class="box-tools">
                <div class="btn-group btn-group-sm">
                    <button class="btn btn-warning server-button" onclick="setup(this);"><span class="fa fa-ship"></span> Yeniden Kur</button>
                    <button class="btn btn-success server-button" onclick="start(this);"><span class="fa fa-play"></span> Başlat</button>
                    <button class="btn btn-danger server-button" onclick="stop(this);"><span class="fa fa-stop"></span> Durdur</button>
                    <button class="btn btn-default server-button" onclick="logs();"><span class="fa fa-history"></span> Loglar</button>
                    <a href="/projects/{{ project.id }}/tasks" class="btn btn-default btn-sm"><span class="fa fa-gears"></span> Tüm Görevler</a>
                    <a href="/projects/save?id={{ project.id }}" class="btn btn-default btn-sm"><span class="fa fa-save"></span> Projeyi Güncelle</a>
                </div>
            </div>
        </div>
        <div class="alert alert-setup" style="display: none;">Proje kuruluyor...</div>
    </div>
    <div id="containers"></div>
    {% verbatim %}
        <script id="container-list-template" type="text/x-handlebars-template">
            {{#if containers}}
                {{#each containers}}
                    <div class="box {{#if is_running }}box-success{{else}}box-danger{{/if}}">
                        <div class="box-header with-border">
                            <h3 class="box-title"><span class="fa fa-server" style="color:{{#if is_running }}green{{else}}red{{/if}}"></span> {{name}}</h3>
                            <div class="box-tools pull-right">
                                <div class="btn-group btn-group-sm">
                                    <button type="button" class="btn btn-default btn-sm" onclick="inspect('{{id}}');"><span class="fa fa-info-circle"></span> Detay</button>
                                    <button type="button" class="btn btn-default btn-sm" onclick="logs('{{name}}');"><span class="fa fa-history"></span> Loglar</button>
                                </div>
                            </div>
                        </div>
                        <div class="box-body">
                            <div style="padding: 4px 8px; font-size: 13px;">
                                {{#each ports}}
                                    {{port}} -> {{hostIp}}:{{hostPort}}
                                {{else}}
                                    Açık port bulunamadı.
                                {{/each}}
                            </div>
                        </div>
                    </div>
                {{/each}}
            {{else}}
                <div class="alert alert-info">Herhangi bir konteyner bulunmamakta. Kurulum yapılması gerekiyor.</div>
            {{/if}}
        </script>
    {% endverbatim %}
{% endblock %}

{% block css %}
    {{ parent() }}
    <link rel="stylesheet" href="/assets/jquery.jsonview.min.css" />
    <style type="text/css">
        .scroll {
            width: 100%;
            height: 400px;
            overflow: auto;
        }
    </style>
{% endblock %}

{% block js %}
    <script type="text/javascript" src="/assets/jquery.jsonview.min.js"></script>
    <script type="text/javascript" src="/assets/underscore.js"></script>
    <script type="text/javascript" src="/assets/ace/ace.js"></script>
    <script type="text/javascript" src="/assets/handlebars.js"></script>
    <script type="text/javascript">
        var projectId = {{ project.id }};
        var containerListTemplate = Handlebars.compile($('#container-list-template').html());

        function render() {
            $('#containers').html('Yükleniyor...');
            $.get('/projects/containers?project_id=' + projectId)
                .done(function (containers) {
                    containers = _.map(containers, function (item) {
                        var ports = [];
                        _.each(item.NetworkSettings.Ports, function (value, key) {
                            _.each(value, function (hostPort) {
                                ports.push({
                                    port: key,
                                    hostIp: hostPort.HostIp,
                                    hostPort: hostPort.HostPort
                                });
                            });
                        });
                        return {
                            id: item.Id,
                            name: item.Config.Labels['com.docker.compose.service'],
                            is_running: item.State.Running,
                            status: item.State.Status,
                            ports: ports
                        }
                    });
                    containers = _.sortBy(containers, 'name');
                    $('#containers').html(containerListTemplate({
                        containers: containers
                    }));
                })
                .fail(function () {
                    alert('An error occurred!');
                });
        }

        function setup(object) {
            var oldHtml = $(object).html();
            $('.server-button').attr('disabled', 'disabled');
            $(object).html('Starting...');
            $.post('/projects/server/setup?project_id=' + projectId)
                .done(function (data) {
                    listenTask(data.taskId, function () {
                        $('.server-button').removeAttr('disabled');
                        $(object).html(oldHtml);
                        render();
                    });
                });
        }

        function start(object) {
            var oldHtml = $(object).html();
            $('.server-button').attr('disabled', 'disabled');
            $(object).html('Starting...');
            $.post('/projects/server/start?project_id=' + projectId)
                .done(function (data) {
                    listenTask(data.taskId, function () {
                        $('.server-button').removeAttr('disabled');
                        $(object).html(oldHtml);
                        render();
                    });
                });
        }

        function stop(object) {
            var oldHtml = $(object).html();
            $('.server-button').attr('disabled', 'disabled');
            $(object).html('Stopping...');
            $.post('/projects/server/stop?project_id=' + projectId)
                .done(function (data) {
                    listenTask(data.taskId, function () {
                        $('.server-button').removeAttr('disabled');
                        $(object).html(oldHtml);
                        render();
                    });
                });
        }

        function inspect(containerId) {
            $('#container-info').modal('show');
            $('#container-info .detail').hide();
            $('#container-info .loading').show();
            $.get('/projects/server/inspect?project_id=' + projectId + '&container_id=' + containerId)
                .done(function (data) {
                    $('#container-info .loading').hide();
                    $('#container-info .detail').show().JSONView(JSON.stringify(data, null, 2));
                })
                .fail(function () {
                    alert('An error occurred!');
                });
        }

        function logs(serviceName) {
            if (serviceName == undefined) {
                serviceName = '';
            }
            $('#log-info').modal('show');
            $('#log-info .detail').hide();
            $('#log-info .loading').show();
            $.get('/projects/server/logs?project_id=' + projectId + '&service_name=' + serviceName)
                .done(function (data) {
                    $('#log-info .loading').hide();
                    $('#log-info .detail').show().html(data.replace(/\n/g, "<br />"));
                })
                .fail(function (e) {
                    alert('An error occurred!');
                });
        }

        function closeModal(e) {
            $(e).parents('.modal').modal('hide');
        }

        function listenTask(taskId, callback) {
            $.get('/tasks/' + taskId + '/info?project_id=' + projectId)
                .done(function (data) {
                    if (data.isCompleted) {
                        callback();
                    } else {
                        setTimeout(function () {
                            listenTask(taskId, callback);
                        }, 1000);
                    }
                });
        }

        {% if current_task.id %}
            $('.alert-setup').show();
            $('.server-button').attr('disabled', 'disabled');
            listenTask({{ current_task.id }}, function () {
                $('.alert-setup').hide();
                $('.server-button').removeAttr('disabled');
                render();
            });
        {% else %}
            render();
        {% endif %}
    </script>
{% endblock %}